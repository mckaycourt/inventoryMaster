extends layout

block content
    link(rel='stylesheet', href='#{location}/stylesheets/item.css')
    style.
        .sendToStorage {
            display: none;
        }
    body
        .container
            include itemInfo
            form#form(action='#{location}/newComputer', method='post')

                br
                .row
                    .col-25
                        label(for='icn') ICN:
                    .col-75
                        input#icn(type='text', name='icn', placeholder='ICN' value='#{ICN}')
                .row
                    .col-25
                        label(for='employee') Employee:
                    .col-75
                        select#employee.selectpicker(name='EmployeeID')
                            each person in employees
                                if(person.EmployeeID === EmployeeID)
                                    option(value=person.EmployeeID selected) #{person.FirstName} #{person.LastName}
                                else
                                    option(value=person.EmployeeID) #{person.FirstName} #{person.LastName}
                .row
                    .col-25
                        label(for='make') Make:
                    .col-75
                        select#make.custom-select.sources(name='make', placeholder='Make' onchange='refreshModelOptions()')
                            each makeOption in makeOptions
                                if(makeOption.Make === "None")
                                    option(value=makeOption.Make selected) #{makeOption.Make}
                                else
                                    option(value=makeOption.Make) #{makeOption.Make}
                .row
                    .col-25
                        label(for='model') Model:
                    .col-75
                        select#model.custom-select.sources(name='model', placeholder='Model' onchange='newModel();')
                            each modelOption in modelOptions
                                option(value=modelOption.Model) #{modelOption.Model}
                .row
                    .col-25
                        label(for='type') Type:
                    .col-75
                        select#type.custom-select.sources(name='type', placeholder='Computer Type')
                            each typeOption in typeOptions
                                if(typeOption.Type === "None")
                                    option(value=typeOption.Type selected) #{typeOption.Type}
                                else
                                    option(value=typeOption.Type) #{typeOption.Type}
                .row
                    .col-25
                        label(for='serialNumber') Serial Number:
                    .col-75
                        input#serialNumber(type='text', name='serialNumber', placeholder='Serial Number')
                .row
                    .col-25
                        label(for='serviceTag') Service Tag:
                    .col-75
                        input#serviceTag(type='text', name='serviceTag', placeholder='Service Tag')
                .row
                    .col-25
                        label(for='expressServiceCode') Express Service Code:
                    .col-75
                        input#expressServiceCode(type='text', name='expressServiceCode', placeholder='Express Service Code')
                .row
                    .col-25
                        label(for='dateAcquired') Date Acquired:
                    .col-75
                        input#dateAcquired(type='date', name='dateAcquired', placeholder='YYYY-MM-DD' value='#{date}')
                .row
                    .col-25
                        label(for='warranty') Warranty:
                    .col-75
                        input#warranty(type='date', name='warranty', placeholder='YYYY-MM-DD')
                .row
                    .col-25
                        label(for='homeCheckout') Home Checkout:
                    .col-75
                        label.switch
                            input#homeCheckout(type='checkbox', name='homeCheckout', placeholder='Home Checkout')
                            span.slider.round
                .row
                    .col-25
                        label(for='touch') Touch:
                    .col-75
                            label.switch
                                input#touch(type='checkbox', name='touch')
                                span.slider.round
                .row
                    .col-25
                        label(for='screenResolution') Screen Resolution:
                    .col-75
                        input#screenResolution(type='text' name='screenResolution', placeholder='3840x2160' required)
                .row
                    .col-25
                        label(for='processorType') Processor Type:
                    .col-75
                        select#processorType.custom-select.sources(name='processorType' onchange='newProcessorType();' required)
                            each processorType in processorTypeOptions
                                option(value=processorType.ProcessorType) #{processorType.ProcessorType}
                .row
                    .col-25
                        label(for='processorSpeed') Processor Speed:
                    .col-75
                        select#processorSpeed.custom-select.sources(name='processorSpeed' onchange='newProcessorSpeed();' required)
                            each processorSpeed in processorSpeedOptions
                                option(value=processorSpeed.ProcessorSpeed) #{processorSpeed.ProcessorSpeed}
                .row
                    .col-25
                        label(for='memory') Memory:
                    .col-75
                        select#memory.custom-select.sources(name='memory' onchange='newMemory();' required)
                            each memory in memoryOptions
                                option(value=memory.Memory) #{memory.Memory}
                .row
                    .col-25
                        label(for='hardDrive') Hard Drive:
                    .col-75
                        select#hardDrive.custom-select.sources(name='hardDrive' onchange='newHardDrive();' required)
                            each hardDrive in hardDriveOptions
                                option(value=hardDrive.HardDrive) #{hardDrive.HardDrive}
                .row
                    .col-25
                        label(for='graphicsCard') Graphics Card:
                    .col-75
                        select#graphicsCard.custom-select.sources(name='graphicsCard' onchange='newGraphicsCard();' required)
                            each graphicsCard in graphicsCardOptions
                                option(value=graphicsCard.VCName) #{graphicsCard.VCName}
                .row
                    .col-25
                        label(for='notes') Notes:
                    .col-75
                        textarea#notes(name='notes', placeholder='Write something..', style='height:200px')
    script.
        function goBack() {
            $("#cardInfo").css('display', 'block');
            $("#computerInfo").css('display', 'none');
        }
        function showMain() {
            $("#mainInfo").css('display', 'block');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'none');
        }
        function showOther() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'block');
            $("#hardwareInfo").css('display', 'none');
            $("#showOtherInfo").css('display', 'none');
            $("#showHardwareInfo").css('display', 'block');

        }
        function showHardware() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'block');
            $("#showHardwareInfo").css('display', 'none');
            $("#submit").css('display', 'block');

        }
        function newModel() {
            if ($("#model").val() === "Add a New Option") {
                let model = prompt("New Model:");
                if (model !== null && model !== "") {
                    console.log(model);
                    $("#model").append(new Option(model, model));
                    $("#model").val(model);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getProcessorOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#processorType").html(data);
                    newProcessorType();
                    newProcessorSpeed();
                    newMemory();
                    newHardDrive();
                });
            }
        }
        function newProcessorType() {
            if ($("#processorType").val() === "Add a New Option") {
                let add = prompt("New Processor Type:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#processorType").append(new Option(add, add));
                    $("#processorType").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getProcessorSpeedOptions?processorType=" + $("#processorType").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#processorSpeed").html(data);
                });
            }
        }
        function newProcessorSpeed() {
            if ($("#processorSpeed").val() === "Add a New Option") {
                let add = prompt("New Processor Speed:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#processorSpeed").append(new Option(add, add));
                    $("#processorSpeed").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getMemoryOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#memory").html(data);
                });
            }
        }
        function newMemory() {
            if ($("#memory").val() === "Add a New Option") {
                let add = prompt("New Memory:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#memory").append(new Option(add, add));
                    $("#memory").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getHardDriveOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#hardDrive").html(data);
                });
            }
        }
        function newHardDrive() {
            if ($("#hardDrive").val() === "Add a New Option") {
                let add = prompt("New Hard Drive:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#hardDrive").append(new Option(add, add));
                    $("#hardDrive").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getGraphicsCardOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#graphicsCard").html(data);
                });
            }
        }
        function newGraphicsCard() {
            if ($("#graphicsCard").val() === "Add a New Option") {
                let add = prompt("New Hard Drive:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#graphicsCard").append(new Option(add, add));
                    $("#graphicsCard").val(add);
                }
            }
        }
        function refreshModelOptions() {
            if ($("#make").val() === "Add a New Option") {
                let make = prompt("New Make:");
                if (make !== null && make !== "") {
                    console.log(make);
                    $("#make").append(new Option(make, make));
                    $("#make").val(make);
                    newModel();
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getModelOptions?type=Computer&make=" + $("#make").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#model").html(data);
                });
            }
        }

        function stopBounce(id) {
            console.log(id);
            $('#' + id.id).css('display', 'none');
        }

        function go() {
            $("#form").submit();

        }